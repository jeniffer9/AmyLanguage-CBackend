package amyc
package codegenC

import analyzer._
import ast.SymbolicTreeModule.{And => AmyAnd, Call => AmyCall, Div => AmyDiv, Or => AmyOr, _}
import ast.Identifier
import c.{Instructions, _}
import Instructions._
import Utils._
import utils.{Context, Pipeline}

// Generates C code for an Amy program
object CodeGenC extends Pipeline[(Program, SymbolTable), Module] {
  def run(ctx: Context)(v: (Program, SymbolTable)): Module = {
    val (program, table) = v

    // Generate code for an Amy module
    def cgModule(moduleDef: ModuleDef): List[Function] = {
      val ModuleDef(name, defs, optExpr) = moduleDef
      // Generate code for all functions
      defs.collect { case fd: FunDef if !builtInFunctions(fullName(name, fd.name)) =>
        cgFunction(fd, name, false)
      } ++
      // Generate code for the "main" function, which contains the module expression
      optExpr.toList.map { expr =>
        val mainFd = FunDef(Identifier.fresh("main"), Nil, TypeTree(IntType), expr)
        cgFunction(mainFd, name, true)
      }
    }

    // Generate code for a function in module 'owner'
    def cgFunction(fd: FunDef, owner: Identifier, isMain: Boolean): Function = {
      // Note: We create the wasm function name from a combination of
      // module and function name, since we put everything in the same wasm module.
      val name = fullName(owner, fd.name)
      Function(name, fd.params.size){ lh =>
        val locals = fd.paramNames.zipWithIndex.toMap
        val body = cgExpr(fd.body)(locals, lh)
        if (isMain) {
          body <:> Drop // Main functions do not return a value,
                        // so we need to drop the value generated by their body
        } else {
          body
        }
      }
    }

    // Generate code for an expression expr.
    // Additional arguments are a mapping from identifiers (parameters and variables) to
    // their index in the wasm local variables, and a LocalsHandler which will generate
    // fresh local slots as required.
    def cgExpr(expr: Expr)(implicit locals: Map[Identifier, Int], lh: LocalsHandler): Code = expr match {
      case Variable(name) => GetLocal(locals(name))
      case IntLiteral(value) => Const(value)
      case BooleanLiteral(value) =>
        if (value) {
          Const(1)
        } else {
          Const(0)
        }
      case StringLiteral(value) => Strng(value)
      case UnitLiteral() => Const(0)
      case Plus(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Add <:> cgExpr(rhs)
      case Minus(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Sub <:> cgExpr(rhs)
      case Times(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Mul <:> cgExpr(rhs)
      case AmyDiv(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Div <:> cgExpr(rhs)
      case Mod(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Rem <:> cgExpr(rhs)
      case LessThan(lhs: Expr, rhs: Expr)  =>
        cgExpr(lhs) <:> Lt_s <:> cgExpr(rhs)
      case LessEquals(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Le_s <:> cgExpr(rhs)
      case AmyAnd(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> And <:> cgExpr(rhs)
      case AmyOr(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Or <:> cgExpr(rhs)
      case Equals(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> Eq <:> cgExpr(rhs)
      case Concat(lhs: Expr, rhs: Expr) =>
        cgExpr(lhs) <:> And <:> cgExpr(rhs)
      case Not(e) => cgExpr(e) <:> Eqz
      case Neg(e) => Const(0) <:> cgExpr(e) <:> Sub
      case AmyCall(qname, args: List[Expr]) =>
        ???
      case Sequence(e1: Expr, e2: Expr) =>
        cgExpr(e1) <:> Drop <:> cgExpr(e2)
      case Let(df, value: Expr, body: Expr) =>
        val localIndex = lh.getFreshLocal()
        cgExpr(value) <:> SetLocal(localIndex) <:> cgExpr(body)(locals + (df.name -> localIndex), lh)
      case Ite(cond: Expr, thenn: Expr, elze: Expr) =>
        cgExpr(cond) <:> If_i32 <:> cgExpr(thenn) <:> Else <:> cgExpr(elze) <:> End
      case Match(scrut: Expr, cases: List[MatchCase]) => {
        val scrutId = lh.getFreshLocal()

        def matchAndBind(p: Pattern): (Code, Map[Identifier, Int]) = p match {
          case WildcardPattern() => (Drop <:> Const(1), Map())
          case IdPattern(name) =>
            val newLoco = lh.getFreshLocal()
            (SetLocal(newLoco) <:> Const(1) ,Map(name -> newLoco))
          case LiteralPattern(lit) =>
            (cgExpr(lit) <:> Eq, Map())
          case CaseClassPattern(con, args) => ???
        }

        val scrutCode = cgExpr(scrut) <:> SetLocal(scrutId)
        val matchCode = cases.map(c => {
          val (code, newLocos) = matchAndBind(c.pat)
          GetLocal(scrutId) <:> code <:> If_i32 <:> cgExpr(c.expr)(locals ++ newLocos, lh) <:> Else
        })

        scrutCode <:> matchCode <:> Strng("Match error!") <:> Call("Std_printString") <:> Unreachable <:> cases.map(_ => End)
      }
      case Error(msg: Expr) =>
        ???
    }

    Module(
      program.modules.last.name.name,
      defaultIncludes,
      globalsNo,
      cFunctions/* ++ (program.modules flatMap cgModule)*/
    )

  }
}
